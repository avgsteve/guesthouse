//
//VARIABLES AND FUNCTIONS
@import "abstracts/functions";
@import "abstracts/mixins";
@import "abstracts/variables"; //
//REUSABLE COMPONENTS
@import "components/bg-video";
@import "components/card";
@import "components/composition";
@import "components/feature-box";
@import "components/form";
@import "components/popup";
@import "components/story";
@import "components/button";
@import "components/textLink"; //
//
@import "base";
@import "typography";
@import "nav";
@import "header";
@import "footer"; //
//
/*
Note in main.scss:

1) use "npm run concat:css" to generate concatinated file
    NPM package.json script:
    "concat:css": "concat -o public/css/style.concat.css public/css/icon-font.css public/css/style.comp.css",

  style.concat.css is the output file

2) PostCSS  (ref:  https://www.npmjs.com/package/postcss )
   PostCSS is a tool for transforming styles with JS plugins. These plugins can lint your CSS, support variables and mixins, transpile future CSS syntax, inline images, and more.

3) Autoprefixer  (ref: https://www.npmjs.com/package/autoprefixer )
   PostCSS plugin to parse CSS and add vendor prefixes to CSS rules using values from Can I Use. It is recommended by Google and used in Twitter and Alibaba.
Write your CSS rules without vendor prefixes (in fact, forget about them entirely):

4) NPM Script:   "build:css": "npm-run-all compile:sass concat:css prefix:css compress:css"
   will compile main.scss, concatinate compiled CSS with icon-font.css, prefixing and building the concatinated CSS for making the CSS compatible with older browsers and then finally compress the CSS file

*/